name: CI/CD
on:
  push:
    branches:
      - feature/*
      - dev
      - main
  pull_request:
    branches:
      - main
      - dev
      - feature/*
  workflow_dispatch:

jobs:
  backend-CI:
    runs-on: ubuntu-latest

    services:
      db:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: wlghks24461!
          MYSQL_DATABASE: harpsharp
          MYSQL_USE_SSL: false
          MYSQL_SERVER_TIMEZONE: Asia/Seoul
          MYSQL_CHARACTER_ENCODING: UTF-8
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis
        ports:
          - 6379:6379
        options: --entrypoint redis-server


    steps:
      - name: 체크아웃
        uses: actions/checkout@v2
      - name: Verify MySQL connection from host
        run: mysql -h 127.0.0.1 --port=3306 -u root -pwlghks24461! -e "SHOW DATABASES"

      - name: JDK 17 설정
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "corretto"

      - name: YML 파일 생성
        run: |
          mkdir -p auth/src/main/resources
          echo "${{ secrets.APPLICATION_AUTH_DEFAULT }}" | base64 --decode > auth/src/main/resources/application.yaml
          echo "${{ secrets.APPLICATION_AUTH_LOCAL }}" | base64 --decode > auth/src/main/resources/application-local.yaml
          echo "${{ secrets.APPLICATION_AUTH_PROD  }}" | base64 --decode > auth/src/main/resources/application-prod.yaml
          
          echo "${{ secrets.APPLICATION_AUTH_DEFAULT }}" | base64 --decode > board/src/main/resources/application.yaml
          echo "${{ secrets.APPLICATION_AUTH_LOCAL }}" | base64 --decode > board/src/main/resources/application-local.yaml
          echo "${{ secrets.APPLICATION_AUTH_PROD  }}" | base64 --decode > board/src/main/resources/application-prod.yaml
          
          echo "${{ secrets.APPLICATION_AUTH_DEFAULT }}" | base64 --decode > todo/src/main/resources/application.yaml
          echo "${{ secrets.APPLICATION_AUTH_LOCAL }}" | base64 --decode > todo/src/main/resources/application-local.yaml
          echo "${{ secrets.APPLICATION_AUTH_PROD  }}" | base64 --decode > todo/src/main/resources/application-prod.yaml

      - name: 빌드 및 API 명세서 생성 (Auth)
        working-directory: ./auth
        run: |
          mkdir -p build/api-spec
          chmod +x ./gradlew
          ./gradlew clean build --warning-mode all
          ./gradlew openapi3 --warning-mode all

      - name: 빌드 및 API 명세서 생성 (Board)
        working-directory: ./board
        run: |
          mkdir -p build/api-spec
          chmod +x ./gradlew
          ./gradlew clean build --warning-mode all
          ./gradlew openapi3 --warning-mode all

      - name: 빌드 및 API 명세서 생성 (Todo)
        working-directory: ./todo
        run: |
          mkdir -p build/api-spec
          chmod +x ./gradlew
          ./gradlew clean build --warning-mode all
          ./gradlew openapi3 --warning-mode all

        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      - name: Configure AWS credentials
        if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 배포 Dir 생성(DB)
        if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' }}
        working-directory: ./infra_rds
        run: |
          mkdir -p deploy-db
          cp docker-compose.yml deploy-db/
          cd ../ && mkdir -p deploy/db
          mv ./infra_rds/deploy-db/* deploy/db 

      - name: 배포 Dir 생성(Auth)
        if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' }}
        working-directory: ./auth
        run: |
          mkdir -p deploy-auth
          cp build/libs/auth-*.jar deploy-auth/
          cp Dockerfile deploy-auth/
          cp docker-compose.yml deploy-auth/
          cp build/api-spec/authAPI.json deploy-auth/
          cd ../ && mkdir -p deploy/auth
          mv ./auth/deploy-auth/* deploy/auth

      - name: 배포 Dir 생성(Board)
        if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' }}
        working-directory: ./board
        run: |
          mkdir -p deploy-board
          cp build/libs/board-*.jar deploy-board/
          cp Dockerfile deploy-board/
          cp docker-compose.yml deploy-board/
          cp build/api-spec/boardAPI.json deploy-board/
          cd ../ && mkdir -p deploy/board
          mv ./board/deploy-board/* deploy/board 

      - name: 배포 Dir 생성(Todo)
        if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' }}
        working-directory: ./todo
        run: |
          mkdir -p deploy-todo
          cp build/libs/todo-*.jar deploy-todo/
          cp Dockerfile deploy-todo/
          cp docker-compose.yml deploy-todo/
          cp build/api-spec/todoAPI.json deploy-todo/
          cd ../ && mkdir -p deploy/todo
          mv ./todo/deploy-todo/* deploy/todo 

      - name: 배포 Dir 생성(Nginx)
        if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' }}
        working-directory: ./
        run : |
          mkdir -p deploy/nginx
          mv ./nginx/* deploy/nginx

      - name: S3 업로드 및 CD 요청
        if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' }}
        working-directory: ./
        run: |
          cp scripts/*.sh deploy
          cp appspec.yml deploy
          ls deploy -a
          cd deploy && zip -r deploy *
          aws s3 cp deploy.zip s3://${{ secrets.AWS_BUCKET_NAME }}/deploy.zip

          aws deploy create-deployment \
          --application-name ${{ secrets.AWS_CODEDEPLOY_APP_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ secrets.AWS_CODEDEPLOY_GROUP_NAME }} \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=${{ secrets.AWS_BUCKET_NAME }},bundleType=zip,key=deploy.zip
